import pandas as pd
import openpyxl
from openpyxl import Workbook
import os
import sys

# --- IMPORT C√ÅC H√ÄM T·ª™ FILE C·ª¶A B·∫†N ---
# ƒê·ªÉ m√£ n√†y ch·∫°y ƒë∆∞·ª£c, b·∫°n c·∫ßn ƒë·∫∑t file test n√†y c√πng c·∫•p v·ªõi data_processor.py v√† app.py
# ho·∫∑c ƒë·∫£m b·∫£o ch√∫ng c√≥ th·ªÉ ƒë∆∞·ª£c import.

try:
    from data_processor import (
        load_and_prepare_pallets,
        preprocess_oversized_pallets,
        separate_pallets_by_company,
        preprocess_and_classify_pallets,
        layered_priority_packing,
        defragment_and_consolidate,
        phase_3_cross_shipping_and_finalization,
        generate_response_data,
        load_and_map_raw_data_for_pkl
    )
    from app import (
        _generate_dataframe_for_container,
        write_packing_list_to_sheet
    )
    print("INFO: ƒê√£ import th√†nh c√¥ng c√°c h√†m t·ª´ data_processor.py v√† app.py.")
except ImportError as e:
    print(f"ERROR: Kh√¥ng th·ªÉ import c√°c h√†m c·∫ßn thi·∫øt. H√£y ch·∫Øc ch·∫Øn r·∫±ng file test n√†y")
    print(f"       ƒë∆∞·ª£c ƒë·∫∑t c√πng th∆∞ m·ª•c v·ªõi 'app.py' v√† 'data_processor.py'.")
    print(f"L·ªói chi ti·∫øt: {e}")
    # Tho√°t n·∫øu kh√¥ng import ƒë∆∞·ª£c
    sys.exit()

# --- H√ÄM M·ªöI ƒê∆Ø·ª¢C TH√äM V√ÄO ---
def print_final_pallet_values(all_final_containers):
    """
    H√ÄM T·∫†M TH·ªúI D√ôNG ƒê·ªÇ G·ª† L·ªñI
    In thu·ªôc t√≠nh c·ªßa ƒë·ªëi t∆∞·ª£ng Pallet ƒë·∫ßu ti√™n t√¨m th·∫•y ra terminal r·ªìi tho√°t.
    """
    print("\n" + "="*20 + " B·∫ÆT ƒê·∫¶U KI·ªÇM TRA THU·ªòC T√çNH PALLET " + "="*20)

    # Duy·ªát qua c√°c container ƒë·ªÉ t√¨m pallet ƒë·∫ßu ti√™n
    for container in all_final_containers:
        if hasattr(container, 'pallets') and container.pallets:
            # L·∫•y pallet ƒë·∫ßu ti√™n
            first_pallet = container.pallets[0]

            print("\n‚úÖ ƒê√£ t√¨m th·∫•y m·ªôt ƒë·ªëi t∆∞·ª£ng Pallet. C√°c thu·ªôc t√≠nh c·ªßa n√≥ l√†:")
            
            # vars(object) s·∫Ω in ra c√°c thu·ªôc t√≠nh v√† gi√° tr·ªã c·ªßa n√≥ d∆∞·ªõi d·∫°ng dictionary
            # ƒê√¢y l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ xem d·ªØ li·ªáu b√™n trong.
            print(vars(first_pallet))
            
            print("\n" + "="*60)
            print("üëâ H∆Ø·ªöNG D·∫™N: H√£y nh√¨n v√†o k·∫øt qu·∫£ ·ªü tr√™n v√† t√¨m t√™n thu·ªôc t√≠nh d√πng ƒë·ªÉ ph√¢n lo·∫°i pallet (v√≠ d·ª•: 'type', 'kind', 'classification', 'pallet_type'...).")
            print("             Sau ƒë√≥, d√πng t√™n ƒë√≥ ƒë·ªÉ s·ª≠a l·ªói ·ªü b∆∞·ªõc ti·∫øp theo.")
            return # D·ª´ng h√†m v√† to√†n b·ªô quy tr√¨nh t·∫°i ƒë√¢y ƒë·ªÉ b·∫°n xem k·∫øt qu·∫£

    print("Kh√¥ng t√¨m th·∫•y pallet n√†o ƒë·ªÉ ki·ªÉm tra.")


def run_optimization_process(filepath, sheet_name, company1_name, company2_name):
    """
    Th·ª±c thi to√†n b·ªô quy tr√¨nh t·ªëi ∆∞u h√≥a pallet.
    """
    print("\n" + "="*20 + " B·∫ÆT ƒê·∫¶U QUY TR√åNH T·ªêI ∆ØU H√ìA " + "="*20)

    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(filepath):
        print(f"FATAL ERROR: Kh√¥ng t√¨m th·∫•y file t·∫°i ƒë∆∞·ªùng d·∫´n: '{filepath}'")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i bi·∫øn INPUT_EXCEL_FILE.")
        return None

    # B∆Ø·ªöC 1: T·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu pallet
    print(f"\n[B∆Ø·ªöC 1]: T·∫£i d·ªØ li·ªáu t·ª´ '{filepath}' (Sheet: '{sheet_name}')...")
    all_pallets, error = load_and_prepare_pallets(filepath, sheet_name)
    if error:
        print(f"ERROR: {error}")
        return None
    if not all_pallets:
        print("WARNING: Kh√¥ng c√≥ d·ªØ li·ªáu pallet h·ª£p l·ªá n√†o ƒë∆∞·ª£c t·∫£i l√™n.")
        return None
    print(f"-> ƒê√£ t·∫£i {len(all_pallets)} pallet.")

    container_id_counter = {'count': 1}

    # B∆Ø·ªöC 2: Ti·ªÅn x·ª≠ l√Ω pallet qu√° kh·ªï
    print("\n[B∆Ø·ªöC 2]: Ti·ªÅn x·ª≠ l√Ω pallet qu√° kh·ªï...")
    pre_packed_containers, pallets_to_process = preprocess_oversized_pallets(all_pallets, container_id_counter)
    print(f"-> ƒê√£ ƒë√≥ng g√≥i s·∫µn {len(pre_packed_containers)} container t·ª´ pallet qu√° kh·ªï.")
    print(f"-> C√≤n l·∫°i {len(pallets_to_process)} pallet ƒë·ªÉ x·ª≠ l√Ω ti·∫øp.")

    # B∆Ø·ªöC 3: Ph√¢n t√°ch pallet theo c√¥ng ty
    print("\n[B∆Ø·ªöC 3]: Ph√¢n t√°ch pallet theo c√¥ng ty...")
    pallets_c1, pallets_c2 = separate_pallets_by_company(pallets_to_process, company1_name, company2_name)
    print(f"-> C√¥ng ty 1 ({company1_name}): {len(pallets_c1)} pallet.")
    print(f"-> C√¥ng ty 2 ({company2_name}): {len(pallets_c2)} pallet.")

    # B∆Ø·ªöC 4: X·ª≠ l√Ω cho t·ª´ng c√¥ng ty (Giai ƒëo·∫°n 0, 1, 2)
    print("\n[B∆Ø·ªöC 4]: X·ª≠ l√Ω cho t·ª´ng c√¥ng ty...")
    # C√¥ng ty 1
    print("--- ƒêang x·ª≠ l√Ω C√¥ng ty 1 ---")
    int_p1, comb_p1, float_p1 = preprocess_and_classify_pallets(pallets_c1)
    packed_containers_c1 = layered_priority_packing(int_p1, comb_p1, float_p1, company1_name, container_id_counter)
    final_containers_c1, cross_ship_pallets_c1 = defragment_and_consolidate(packed_containers_c1)
    print(f"-> C1: {len(final_containers_c1)} container ho√†n thi·ªán, {len(cross_ship_pallets_c1)} pallet ch·ªù g·ª≠i ch√©o.")

    # C√¥ng ty 2
    print("--- ƒêang x·ª≠ l√Ω C√¥ng ty 2 ---")
    int_p2, comb_p2, float_p2 = preprocess_and_classify_pallets(pallets_c2)
    packed_containers_c2 = layered_priority_packing(int_p2, comb_p2, float_p2, company2_name, container_id_counter)
    final_containers_c2, cross_ship_pallets_c2 = defragment_and_consolidate(packed_containers_c2)
    print(f"-> C2: {len(final_containers_c2)} container ho√†n thi·ªán, {len(cross_ship_pallets_c2)} pallet ch·ªù g·ª≠i ch√©o.")

    # B∆Ø·ªöC 5: Giai ƒëo·∫°n 3 - V·∫≠n chuy·ªÉn ch√©o v√† ho√†n thi·ªán
    print("\n[B∆Ø·ªöC 5]: Giai ƒëo·∫°n 3 - V·∫≠n chuy·ªÉn ch√©o v√† ho√†n thi·ªán...")
    final_optimized_containers = phase_3_cross_shipping_and_finalization(
        final_containers_c1, cross_ship_pallets_c1,
        final_containers_c2, cross_ship_pallets_c2,
        container_id_counter
    )

    # G·ªôp c√°c container ƒë√£ ƒë√≥ng g√≥i s·∫µn v√†o k·∫øt qu·∫£ cu·ªëi c√πng
    all_final_containers = pre_packed_containers + final_optimized_containers
    print(f"-> T·ªïng s·ªë container cu·ªëi c√πng: {len(all_final_containers)}.")
    
    # --- THAY ƒê·ªîI: G·ªåI H√ÄM IN GI√Å TR·ªä PALLET T·∫†I ƒê√ÇY ---
    print_final_pallet_values(all_final_containers)
    # --------------------------------------------------

    # B∆Ø·ªöC 6: ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
    print("\n[B∆Ø·ªöC 6]: ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·∫ßu ra...")
    formatted_results = generate_response_data(all_final_containers)
    
    print("="*24 + " K·∫æT TH√öC T·ªêI ∆ØU H√ìA " + "="*25)
    return formatted_results


def run_packing_list_generation(optimized_results, original_filepath, sheet_name, output_filename):
    """
    Th·ª±c thi quy tr√¨nh t·∫°o Packing List t·ª´ k·∫øt qu·∫£ t·ªëi ∆∞u h√≥a.
    """
    print("\n" + "="*20 + " B·∫ÆT ƒê·∫¶U T·∫†O PACKING LIST " + "="*21)

    if not optimized_results or not optimized_results.get('results'):
        print("ERROR: Kh√¥ng c√≥ k·∫øt qu·∫£ t·ªëi ∆∞u h√≥a ƒë·ªÉ t·∫°o packing list.")
        return

    # B∆Ø·ªöC 1: T·∫£i v√† √°nh x·∫° d·ªØ li·ªáu th√¥ cho PKL
    print("\n[B∆Ø·ªöC 1]: T·∫£i v√† √°nh x·∫° d·ªØ li·ªáu th√¥ cho Packing List...")
    raw_data_map, error = load_and_map_raw_data_for_pkl(original_filepath, sheet_name)
    if error:
        print(f"ERROR: {error}")
        return
    print(f"-> ƒê√£ t·∫°o map d·ªØ li·ªáu th√¥ v·ªõi {len(raw_data_map)} s·∫£n ph·∫©m duy nh·∫•t.")

    # B∆Ø·ªöC 2: T·∫°o file Excel v√† c√°c sheet
    print("\n[B∆Ø·ªöC 2]: T·∫°o file Excel v√† ghi d·ªØ li·ªáu cho t·ª´ng container...")
    wb = Workbook()
    wb.remove(wb.active)
    pallet_counter = {'item_no': 1, 'pallet_no': 1}
    
    cumulative_totals = {'pcs': 0.0, 'nw': 0.0, 'gw': 0.0}
    
    containers_data = optimized_results['results']
    for container_data in containers_data:
        container_id_str = container_data.get('id', 'Unknown')
        container_id_num = ''.join(filter(str.isdigit, container_id_str))
        if not container_id_num:
           container_id_num = container_id_str.split('_')[-1]

        sheet_title = f"PKL_Cont_{container_id_num}"
        print(f"--- ƒêang x·ª≠ l√Ω {sheet_title} ---")
        ws = wb.create_sheet(title=sheet_title)

        df_for_pkl = _generate_dataframe_for_container(container_data, raw_data_map, pallet_counter)
        
        cumulative_totals['pcs'] += df_for_pkl["Q'ty (pcs)"].sum()
        cumulative_totals['nw'] += df_for_pkl['N.W (kgs)'].sum()
        cumulative_totals['gw'] += df_for_pkl['G.W (kgs)'].sum()
        
        current_cumulative_pallets = pallet_counter['pallet_no'] - 1

        write_packing_list_to_sheet(
            ws, 
            df_for_pkl, 
            container_id_num,
            current_cumulative_pallets,
            cumulative_totals['pcs'],
            cumulative_totals['nw'],
            cumulative_totals['gw']
        )
        print(f"-> ƒê√£ ghi d·ªØ li·ªáu cho {sheet_title}.")


    # B∆Ø·ªöC 3: L∆∞u file Excel k·∫øt qu·∫£
    print(f"\n[B∆Ø·ªöC 3]: L∆∞u k·∫øt qu·∫£ v√†o file '{output_filename}'...")
    try:
        wb.save(output_filename)
        print(f"SUCCESS: ƒê√£ t·∫°o file Packing List th√†nh c√¥ng: '{output_filename}'")
    except Exception as e:
        print(f"ERROR: Kh√¥ng th·ªÉ l∆∞u file Excel. L·ªói: {e}")

    print("="*24 + " K·∫æT TH√öC T·∫†O PACKING LIST " + "="*24)


if __name__ == '__main__':
    # --- C√ÅC THAM S·ªê C·∫§U H√åNH ---
    # !!! QUAN TR·ªåNG: THAY ƒê·ªîI C√ÅC GI√Å TR·ªä D∆Ø·ªöI ƒê√ÇY !!!
    
    # 1. ƒê∆∞·ªùng d·∫´n file Excel d·ªØ li·ªáu th√¥
    INPUT_EXCEL_FILE = "C:\\Users\\emily\\Documents\\Zalo Received Files\\Chia cont - 2025(AutoRecovered).xlsx"
    
    # 2. T√™n Sheet mu·ªën x·ª≠ l√Ω
    SHEET_NAME = "09 Jun"

    # 3. T√™n hai c√¥ng ty
    COMPANY_1_NAME = "1.0"
    COMPANY_2_NAME = "2.0"
    
    # 4. Th∆∞ m·ª•c l∆∞u file k·∫øt qu·∫£
    OUTPUT_DIRECTORY = "C:\\Users\\emily\\Downloads"

    # Script s·∫Ω t·ª± ƒë·ªông t·∫°o th∆∞ m·ª•c n√†y n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
    if not os.path.exists(OUTPUT_DIRECTORY):
        os.makedirs(OUTPUT_DIRECTORY)

    output_filename = f"Generated_Packing_List_for_{SHEET_NAME}.xlsx"
    OUTPUT_PKL_FILE = os.path.join(OUTPUT_DIRECTORY, output_filename)
    
    print(f"INFO: File Packing List s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: {OUTPUT_PKL_FILE}")

    # --- CH·∫†Y QUY TR√åNH T·ªêI ∆ØU H√ìA ---
    optimization_result = run_optimization_process(
        filepath=INPUT_EXCEL_FILE,
        sheet_name=SHEET_NAME,
        company1_name=COMPANY_1_NAME,
        company2_name=COMPANY_2_NAME
    )

    # --- CH·∫†Y QUY TR√åNH T·∫†O PACKING LIST ---
    if optimization_result:
        run_packing_list_generation(
            optimized_results=optimization_result,
            original_filepath=INPUT_EXCEL_FILE,
            sheet_name=SHEET_NAME,
            output_filename=OUTPUT_PKL_FILE
        )
    else:
        print("\nERROR: Quy tr√¨nh t·ªëi ∆∞u h√≥a th·∫•t b·∫°i. B·ªè qua b∆∞·ªõc t·∫°o Packing List.")